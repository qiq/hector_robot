my $host = $resource->getUrlHost();
my $n = length('cuni.cz');
if (substr($host, -$n) ne 'cuni.cz') {
	log_debug("Not in allowed scope: ".$host);
	$resource->setFlag($Hector::Resource::DELETED);
	return;
}

# path segments count
my $path = $resource->getUrlPath();
my @parts = split(/\//, $path);
if (@parts > 10) {
	log_debug("Too many segments: ".$path);
	$resource->setFlag($Hector::Resource::DELETED);
	return;
}
# repeated path segments
my %parts;
foreach my $part (@parts) {
	next if (length($part) == 0);
	$parts{$part}++;
	if ($parts{$part} > 1) {
		log_debug("Repeated segment(s): ".$path);
		$resource->setFlag($Hector::Resource::DELETED);
		return;
	}
}
# path including extensions
if ($path =~ /\.(bmp|jpe?g|gif|png|pdf|e?ps|svg|xls|csv|ppt|pps|mp3|wav|wma|flv|mov|mp4|mpe?g|swf|vob|wmv|jar|exe|rss|gz|tar|tgz|zip|bz2)/) {
	log_debug("Disabled extension: ".$path);
	$resource->setFlag($Hector::Resource::DELETED);
	return;
}

#if ($resource->getUrl() =~ /http:/) {
#        $resource->setStatus(3);
#        print STDERR "test ".$resource->getUrlHost()."\n";
#        $self->{'_object'}->log_debug($resource->toString()."XXXX");
#        if ($resource->getIpAddr()->Match("127.0.0.2/30")) {
#                print STDERR "IP OK\n";
#        }
#}
